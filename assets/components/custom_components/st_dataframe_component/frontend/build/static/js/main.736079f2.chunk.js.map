{"version":3,"sources":["CustomDataFrame.tsx","index.tsx"],"names":["withStreamlitConnection","props","data","Object","keys","length","args","useEffect","Streamlit","setFrameHeight","useState","dataWithComments","setDataWithComments","rows","map","item","index","values","value","_index","TextInput","placeholder","onChange","e","prev","slice","assign","comment","handleSetDataWithComments","target","MantineProvider","theme","colorScheme","colors","light","filename","Button","variant","Table","highlightOnHover","withBorder","withColumnBorders","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA+GeA,eAxES,SAACC,GAIxB,IACmC,EAD/BC,EAAe,GACfC,OAAOC,KAAKH,GAAOI,OAAS,IAC/BH,EAAY,OAALD,QAAK,IAALA,GAAW,QAAN,EAALA,EAAOK,YAAI,WAAN,EAAL,EAAaJ,MAGrBK,qBAAU,kBAAMC,IAAUC,gBAAgB,IAC1C,MAAgDC,mBAAiBR,GAAK,mBAA/DS,EAAgB,KAAEC,EAAmB,KAStCC,EAAOX,EAAKY,KAAI,SAACC,EAAMC,GAAK,OACjC,+BACEb,OAAOc,OAAOF,GAAMD,KAAI,SAACI,EAAOC,GAAM,OACtC,6BAAkBD,GAATC,EAAoB,IAE9B,6BACC,cAACC,EAAA,EAAS,CACTC,YAAY,WACZH,MAAOP,EAAiBK,GAAgB,QACxCM,SAAU,SAACC,GAAC,OAjBkB,SAACL,EAAeF,GACjDJ,GAAoB,SAACY,GAAI,4BACrBA,EAAKC,MAAM,EAAGT,IAAM,CACvBb,OAAOuB,OAAO,CAAC,EAAGF,EAAKR,GAAQ,CAAEW,QAAST,KAAQ,YAC/CM,EAAKC,MAAMT,EAAQ,IAAE,GAE1B,CAYKY,CAA0BL,EAAEM,OAAOX,MAAOF,EAAM,QAT3CA,EAYJ,IAGN,OACC,eAACc,EAAA,EAAe,CACfC,MAAO,CACNC,YAAa,QACbC,OAAQ,CACPC,MAAO,CAAC,SAAU,YAElB,UACF,cAAC,UAAO,CAAChC,KAAMS,EAAkBkB,OAAO,SAASM,SAAS,WAAU,SACnE,cAACC,EAAA,EAAM,CAACC,QAAQ,UAAS,wBAE1B,eAACC,EAAA,EAAK,CAACC,kBAAgB,EAACC,YAAU,EAACC,mBAAiB,YACnD,gCACC,+BACC,uCACA,qCACA,qCACA,uCACA,6CACA,sCACA,qCACA,oCACA,mCACA,mCACA,oCACA,qCACA,sCACA,4CACA,8CAGF,gCAAQ5B,SAIZ,ICxGA6B,IAASC,OACR,cAAC,IAAMC,WAAU,UAChB,cAAC,EAAe,MAEjBC,SAASC,eAAe,Q","file":"static/js/main.736079f2.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport {\n\tComponentProps,\n\tStreamlit,\n\twithStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport { Table, TextInput, MantineProvider, Button } from \"@mantine/core\";\nimport { CSVLink } from \"react-csv\";\nimport React from \"react\";\n\n/**\n * We can use a Typescript interface to destructure the arguments from Python\n * and validate the types of the input\n */\ninterface Data {\n\t_field: string;\n\tMin: number;\n\tMax: number;\n\tGroup: string;\n\tDescription: string;\n\tUnit: string;\n\tLLL: number;\n\tLL: number;\n\tL: number;\n\tH: number;\n\tHH: number;\n\tHHH: number;\n\tFlag: number;\n\tEvaluation: string;\n\tcomment?: string;\n}\n\n/**\n * No more props manipulation in the code.\n * We store props in state and pass value directly to underlying Slider\n * and then back to Streamlit.\n */\ndeclare type CustomComponentProps = Partial<ComponentProps>;\n\nconst CustomDataFrame = (props: CustomComponentProps) => {\n\t// Destructure using Typescript interface\n\t// This ensures typing validation for received props from Python\n\t// console.log(props.args);\n\tlet data: Data[] = [];\n\tif (Object.keys(props).length > 0) {\n\t\tdata = props?.args?.data;\n\t}\n\n\tuseEffect(() => Streamlit.setFrameHeight());\n\tconst [dataWithComments, setDataWithComments] = useState<Data[]>(data);\n\tconst handleSetDataWithComments = (value: string, index: number) => {\n\t\tsetDataWithComments((prev) => [\n\t\t\t...prev.slice(0, index),\n\t\t\tObject.assign({}, prev[index], { comment: value }),\n\t\t\t...prev.slice(index + 1),\n\t\t]);\n\t};\n\n\tconst rows = data.map((item, index) => (\n\t\t<tr key={index}>\n\t\t\t{Object.values(item).map((value, _index) => (\n\t\t\t\t<td key={_index}>{value}</td>\n\t\t\t))}\n\t\t\t<td>\n\t\t\t\t<TextInput\n\t\t\t\t\tplaceholder=\"Comment?\"\n\t\t\t\t\tvalue={dataWithComments[index][\"comment\"]}\n\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\thandleSetDataWithComments(e.target.value, index)\n\t\t\t\t\t}></TextInput>\n\t\t\t</td>\n\t\t</tr>\n\t));\n\n\treturn (\n\t\t<MantineProvider\n\t\t\ttheme={{\n\t\t\t\tcolorScheme: \"light\",\n\t\t\t\tcolors: {\n\t\t\t\t\tlight: [\"E53E3E\", \"FFFFFF\"],\n\t\t\t\t},\n\t\t\t}}>\n\t\t\t<CSVLink data={dataWithComments} target=\"_blank\" filename=\"data.csv\">\n\t\t\t\t<Button variant=\"outline\">Download</Button>\n\t\t\t</CSVLink>\n\t\t\t<Table highlightOnHover withBorder withColumnBorders>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Field</th>\n\t\t\t\t\t\t<th>Min</th>\n\t\t\t\t\t\t<th>Max</th>\n\t\t\t\t\t\t<th>Group</th>\n\t\t\t\t\t\t<th>Description</th>\n\t\t\t\t\t\t<th>Unit</th>\n\t\t\t\t\t\t<th>LLL</th>\n\t\t\t\t\t\t<th>LL</th>\n\t\t\t\t\t\t<th>L</th>\n\t\t\t\t\t\t<th>H</th>\n\t\t\t\t\t\t<th>HH</th>\n\t\t\t\t\t\t<th>HHH</th>\n\t\t\t\t\t\t<th>Flag</th>\n\t\t\t\t\t\t<th>Evaluation</th>\n\t\t\t\t\t\t<th>Comment</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>{rows}</tbody>\n\t\t\t</Table>\n\t\t</MantineProvider>\n\t);\n};\n\nexport default withStreamlitConnection(CustomDataFrame);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CustomDataFrame from \"./CustomDataFrame\";\n\n// Wrap your CustomDataFrame with the baseui them\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<CustomDataFrame />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}